__Mutually Assured Destruction__

Summary
	- Each player starts with some number of cities, some number of nukes, and
		some amount of money..
		+ Default to 3 cities and 5 nukes.
		+ Might make city, nuke, and money quantities configurable on new game.
	- Each nuke has an hourly or daily upkeep cost.
		+ No need to make this configurable. It would be equivalent to changing
			starting money.
			-> On second thought, this should be configurable if other values
				can be configured. For example, costs would need to be deducted
				much more frequently if nuke flight time is reduced to, let's
				say, 30 minutes (a realistic ICBM flight time, apparently).
	- When a player launches or dismantles a nuke, they no longer pay its
		upkeep cost.
	- All commands are sent to the bot in the group chat. All players can see
		all commands and bot announcements.
	- A player can permanently dismantle a nuke at any time.
	- A player can launch a nuke at any target at any time.
	- The launch command is sent to the bot in the group chat and the bot
		announces when the nuke will strike its target (default to 24 hours).
		The bot will probably also make announcements every few hours. The
		targeted player may still choose to launch a nuke at any time.
		+ Default to 24 hours.
		+ Might make this configurable on new game.
	- When a nuke strikes its target, that city is destroyed.
	- When a player runs out of money or cities, that player is eliminated.
	- The game ends when there are no nukes in flight or held by any remaining
		players or when there is only one player left standing.
	- When the game ends:
		+ If no players remain, the game ends in a draw.
		+ If only one player is left standing, that player wins.
		+ If two or more players remain, the player with the most cities wins.
		+ If two or more remaining players hold the same number of cities, the
			player with the most money remaining out of the players with the most
			cities wins.
		+ If two or more remaining players have the same number of cities and
			the same amount of money, the game ends in a draw.

How to maintain state?
	- Probably slightly different from the RPG bot, where the state object was
		passed into the game object. It probably makes more sense for the
		state class to store the overall state of the bot for a given chat,
		including the game object itself.
	- A database is probably the right way to maintain state for many chats,
		rather than holding an object in memory for each chat in which the bot
		is active and repeatedly writing it out to a file. However, I don't
		want to install a database and doing everything in memory and in the
		filesystem will work just fine for the expected number of users/chats.


Classes:

	telegramBot.py (not really a class)
		Functions:
			- InitializeBot(): Somehow need to load the state for all chats in
				which the bot is currently running games. If the bot goes down
				it needs to be able to pick up where it left off without waiting
				for a message from any chat in which it's active.
				+ Send message to known chat_id:
					https://pytba.readthedocs.io/en/latest/sync_version/index.html#telebot.TeleBot.send_message
			- Start(): Runs when the /start command is used or when any command
				is sent to the bot and a state object doesn't already exist for
				the sending chat.
			- StartGame(state): Start the game in the given state object and start
				calling that game's update method on a schedule.

	State
		- Maintains the current state of the bot in a single chat, including any
			active games.
		- Members
			+ game: An instance of the game object. Null (None) if there is no
				ongoing game.
			+ static SAVE_DIRECTORY: Stores the (relative) path of the directory
				containing save files.
		- Methods
			+ __init__(self, saveName): Instantiates state with the given
				save name in self.saveName.
			+ create(saveName): Loads a saved state, if one exists with the given
				saveName, or creates a new state. Returns a reference to the
				created state object to the caller.
			+ load(saveName): Uses pickle to load the state from the file with
				the name in saveName.
			+ save(state): Uses pickle to save the state in the file with
				the name in stateToSave.saveName.
			+ newGame(self): Creates a new game object and stores it in self.game.
			+ endGame(self): Sets self.game to None. To be used when the game ends.

	Player
		- Represents an individual player.
		- Instantiated as necessary by an instance of game.
		- Members
			+ playerId: Unique identifier for this player.
			+ playerName: What to call this player in the chat.
			+ cities: Collection of strings. Holds the names of the player's
				remaining cities.
			+ nukes: Integer keeping track of the player's remaining nukes.
			+ money: Integer keeping track of the player's remaining money.
		- Methods
			+ __init__(self, cities, nukes, money)
	
	Nuke
		- Represents a nuke in flight.
		- Members:
			+ owner: ID of the player who launched the nuke.
			+ target: Name of the targeted city.
			+ launchTime: Datetime at which the nuke was launched.
	
	Game
		- Keeps track of an ongoing game.
		- Members																	[all added to game.py]
			+ activePlayers: A collection of player objects representing each		[added]
				player remaining in the current game.
				-> Probably a dictionary keyed by an ID provided by the caller
					(whatever unique ID Telegram gives users for the bot or an
					arbitrary value for the test harness).
			+ eliminatedPlayers: A collection of eliminated players and their		[added]
				causes of elimination (economic collapse or annihilation). This
				will be used when the scoreboard is displayed and at the end of
				the game when the final results are announced.
			+ upkeepPeriod: How often (in seconds?) upkeep cost is deducted.		[added]
				Will probably use one day and poll something like every minute
				but want to design for the possibility of allowing custom games.
			+ upkeepCost: The cost per upkeep period of owning a nuke.				[added]
			+ lastUpkeepTime: Datetime at which the last upkeep deduction			[added]
				occurred.
			+ inFlight: A collection of nukes that have been launched, their		[added]
				owners, their targets, and the datetimes at which they were
				launched.
			+ flightTime: How long a nuke takes to reach its target after launch.	[added]
			+ gameOver: False when a game is ongoing. True if the game has ended.	[added]
			+ gameStarted: False if the game has not yet started, meaning players	[added]
				can still join. True if the game has started.
			+ cityOwners: Dictionary of player IDs, keyed by city names. Used		[added]
				to ensure that city names are unique and to determine who is
				being attacked when a player uses /nuke {city name}.
		- Methods
			+ __init__(self, upkeepPeriod, upkeepCost, flightTime)					[added]
			+ join(self, playerId, playerName, cityNames): Add a new player.		[added]
			+ start(self): Close the game to new players and start playing.			[added]
				-> Sets lastUpkeepTime to current time.
			+ launch(self, attackingPlayerId, targetCity): Called when a player		[added]
				launches a nuke.
				-> Add a nuke to the inFlight collection.
			+ dismantle(self, playerId): Called when a player dismantles a nuke.	[added]
			+ getScoreboard(self): Returns a string showing  the current state		[added]
				of the game:
				-> players
					- active/eliminated
					- remaining cities
					- remaining money
					- remaining nukes
				-> nukes in flight
					- owner
					- target
					- time of impact
			+ update(self): Periodically called by the bot or state class or a
				timer event.
				-> Compares impact times in the inFlight collection to the
					current time and, if an impact should occur during this
					update, removes the impacting nukes from inFlight, removes
					the targeted cities from their owners' cities collections,
					and adds a message about the nukes hitting their targets to
					the output for this update.
					- Remember to handle the case where the targeted city was
						already destroyed by another nuke arriving earlier.
						"The crater once known as cityName gets a little deeper."
				-> Deducts upkeep if current time > lastUpkeepTime + upkeepPeriod.
				-> Eliminates players with $0 or less or 0 cities and adds a
					message about those eliminations to the output.
				-> Returns any output the bot should send to tell players
					about the game state.
				-> If the game has ended (at most one player remaining and no
					nukes in flight; or no nukes remaining in inventory or in
					flight), set gameOver and return a game over message stating
					the winner (if there is one) and displaying the final
					scoreboard.

How do I call Game.update()?
	- Launch a new thread and poll there?
		+ Would need to have anything that accesses variables used by
			update() take out locks.
	- Use some kind of python timer event or scheduling library?
		+ This might have the same need for locks that the thread would
			have.
	- Use some built in timer event in PyTelegramBotAPI?
		+ If there's something that will automatically call a method
			on a timer/schedule, this would probably be ideal.
		+ Can I create a custom handler and let infinity_polling() call
			it?
			-> https://pytba.readthedocs.io/en/latest/sync_version/index.html#telebot.Handler
	- If PyTelegramBotAPI has a method that allows me to decide when it
		polls/updates, I could stop using infinity_polling() and call
		that method in a loop where I also call Game.update().
		+ https://pytba.readthedocs.io/en/latest/sync_version/index.html#telebot.TeleBot.get_updates
		+ https://pytba.readthedocs.io/en/latest/sync_version/index.html#telebot.TeleBot.process_new_updates
		+ https://pytba.readthedocs.io/en/latest/types.html#telebot.types.Update

Cities names should have a length limit to avoid breaking the output
	formatting.
	- Enforce this (and any other input restrictions) in telegramBot.py.



TODO:
	
	Test the bot in Telegram. Address the TODOs in telegramBot.py afterwards.

	
	Search the .py files for "TODO" comments.
		- Start in telegramBot.py, which is still unfinished (as of 2024-05-08).
