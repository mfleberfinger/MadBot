__Mutually Assured Destruction__

The only winning move is... to win?

Summary
	- Each player starts with some number of cities, some number of nukes, and
		some amount of money..
		+ Default to 3 cities and 5 nukes.
		+ Might make city, nuke, and money quantities configurable on new game.
	- Each nuke has an hourly or daily upkeep cost.
		+ No need to make this configurable. It would be equivalent to changing
			starting money.
	- When a player launches or dismantles a nuke, they no longer pay its
		upkeep cost.
	- All commands are sent to the bot in the group chat. All players can see
		all commands and bot announcements.
	- A player can permanently dismantle a nuke at any time.
	- A player can launch a nuke at any target at any time.
	- The launch command is sent to the bot in the group chat and the bot
		announces when the nuke will strike its target (default to 24 hours).
		The bot will probably also makes announcements every few hours. The
		targeted player may still choose to launch a nuke at any time.
		+ Default to 24 hours.
		+ Might make this configurable on new game.
	- When a nuke strikes its target, that city is destroyed.
	- When a player runs out of money or cities, that player is eliminated.
	- The last player standing after any nukes in flight strike their targets
		wins.

How to maintain state?
	- Probably slightly different from the RPG bot, where the state object was
		passed into the game object. It probably makes more sense for the
		state class to store the overall state of the bot for a given chat,
		including the game object itself.

Classes:

	state
		- Maintains the current state of the bot, including any active games.

	player
		- Represents an individual player.
		- Members
			+ cities: Collection of strings. Holds the names of the player's
				remaining cities.
			+ nukes: Integer keeping track of the player's remaining nukes.
			+ money: Integer keeping track of the player's remaining money.
	
	game
		- Keeps track of an ongoing game.
		- Members
			+ activePlayers: A list of player objects representing each player
				remaining in the current game.
			+ eliminatedPlayers: A collection of eliminated players and their
				causes of elimination (economic collapse or annihilation). This
				will be used when the scoreboard is displayed and at the end of
				the game when the final results are announced.
			+ upkeepCost: The cost per day of owning a nuke.
			+ inFlight: A collection of nukes that have been launched, their
				targets, and the datetimes at which they are scheduled to hit
				their targets.
			+ flightTime: How long a nuke takes to reach its target after launch.
		- Methods
			+ launch
			+ dismantle
			+ getScoreboard
			+ update: Periodically called by the bot/state class or a timer.
				Advances any timed logic (nukes in flight, upkeep cost).
			



TODO:

	Copy whatever can be reused from the RPG bot.
		- The Telegram bot part is probably useful. [done]
		- State and maybe Game are also likely useful.
	
	Search the .py files for "TODO" comments.
